import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) throws IOException {
        // 입력을 빠르게 받아들이기 위한 BufferedReader 사용
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        // 첫 번째 줄 입력을 공백(" ")으로 분리하여 읽기
        StringTokenizer st = new StringTokenizer(br.readLine(), " ");

        // 물건의 수 N과 배낭의 최대 무게 K를 입력받음
        int N = Integer.parseInt(st.nextToken());
        int K = Integer.parseInt(st.nextToken());

        // 각 물건의 무게와 가치를 저장할 배열 (0번 인덱스는 사용하지 않기 때문에 N+1 크기로 생성)
        int[] W = new int[N + 1]; // 무게 배열
        int[] V = new int[N + 1]; // 가치 배열
        // dp 배열은 물건 i까지 고려하고, 배낭 용량이 j일 때의 최대 가치를 저장하는 배열
        int[][] dp = new int[N + 1][K + 1];

        // 각 물건의 무게와 가치를 입력받아 배열에 저장
        for (int i = 1; i <= N; i++) {
            st = new StringTokenizer(br.readLine(), " ");
            W[i] = Integer.parseInt(st.nextToken()); // i번째 물건의 무게
            V[i] = Integer.parseInt(st.nextToken()); // i번째 물건의 가치
        }

        // 동적 계획법으로 최대 가치 계산
        // i는 현재 고려하는 물건을 의미
        for (int i = 1; i <= N; i++) {
            // j는 배낭의 현재 허용 무게를 의미
            for (int j = 1; j <= K; j++) {
                
                // i번째 물건의 무게가 현재 허용 무게 j를 넘는 경우 (담을 수 없는 경우)
                if(W[i] > j) {
                    dp[i][j] = dp[i - 1][j]; // 이전 물건까지 고려한 최댓값을 그대로 사용
                }
                // i번째 물건을 담을 수 있는 경우
                else {
                    // 1. 물건을 담지 않았을 때의 최댓값(dp[i - 1][j])
                    // 2. 물건을 담았을 때의 최댓값(dp[i - 1][j - W[i]] + V[i])
                    // 둘 중 더 큰 값을 선택하여 dp[i][j]에 저장
                    dp[i][j] = Math.max(dp[i - 1][j], dp[i - 1][j - W[i]] + V[i]);
                }
            }
        }
        // 최종적으로 N개의 물건을 고려하고, 배낭의 최대 무게 K에서 얻을 수 있는 최대 가치를 출력
        System.out.println(dp[N][K]);
    }
}
