import java.util.*;
import java.io.*;

public class Main {
	
	// 아파트 단지가 있는지 확인할 2차원 배열
	static int[][] danji;
	// 집을 이미 방문했는지 확인할 2차원 배열
	static boolean[][] visited;
	// 상, 하, 좌, 우로 움직일 때 사용할 배열 (방향을 알려줌)
	static int[] dx = {0,0,-1,1};
	static int[] dy = {-1,1,0,0};
	// 각 단지의 크기를 저장할 리스트
	static List<Integer> result;
	// 현재 단지에 속한 집의 개수, 지도 크기 N
	static int cnt, N;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		
		// 단지의 크기를 저장할 리스트 초기화
		result = new LinkedList<>(); 
		// 지도 크기(N x N)를 입력받음
		N = Integer.parseInt(br.readLine());
		// 아파트 단지 정보를 저장할 2차원 배열
		danji = new int[N][N];
		// 집을 방문했는지 체크할 배열
		visited = new boolean[N][N];
		// 단지에 속한 집의 개수를 셀 변수. 처음에는 1로 시작 (집 하나는 세니까)
		cnt = 1;
		
		// N x N 지도 정보를 입력받음
		for(int i = 0; i < N; i++) {
			String str = br.readLine(); // 한 줄씩 입력받음
			for(int j = 0; j < N; j++) {
				// 지도에서 각 위치에 집이 있는지 (1) 없는지 (0)를 저장
				danji[i][j] = str.charAt(j) - '0'; // 문자를 숫자로 변환
			}
		}
		
		// 지도의 모든 좌표를 탐색
		for(int x = 0; x < N; x++) {
			for(int y = 0; y < N; y++) {
				// 현재 위치에 집이 있고, 아직 방문하지 않았다면
				if(danji[x][y] == 1 && !visited[x][y]) {
					// 집을 탐색하기 위해 dfs(깊이 우선 탐색) 호출
					dfs(x, y);
					// 한 단지를 다 찾으면 그 크기(cnt)를 결과 리스트에 추가
					result.add(cnt);
					// 새로운 단지를 찾기 위해 cnt를 1로 초기화 (새 단지에 집 하나부터 다시 세기)
					cnt = 1;
				}
			}
		}
		
		// 단지 크기를 오름차순으로 정렬 (작은 단지부터 큰 단지 순으로)
		Collections.sort(result);
		
		// 총 단지 수 출력
		bw.write(result.size() + "\n");
		// 각 단지의 크기를 한 줄씩 출력
		for(int r : result) bw.write(r + "\n");
		bw.flush(); // 출력한 내용을 모두 내보냄
		bw.close();
	}

	// 깊이 우선 탐색(DFS)을 사용하여 연결된 집들을 찾는 함수
	public static void dfs(int x, int y) {
		// 현재 위치를 방문했다고 표시
		visited[x][y] = true;
		
		// 상, 하, 좌, 우 4방향으로 이동하면서 집이 있는지 확인
		for(int i = 0; i < 4; i++) {
			// 다음으로 이동할 위치 계산
			int nx = dx[i] + x;
			int ny = dy[i] + y;
			
			// 이동할 위치가 지도 범위를 벗어나지 않고, 아직 방문하지 않았으며, 집이 있는 경우
			if(nx >= 0 && ny >= 0 && nx < N && ny < N && !visited[nx][ny] && danji[nx][ny] == 1) {
				// 단지에 집이 하나 더 있으므로 cnt를 증가
				cnt++;
				// 그 집에서 다시 DFS 호출하여 연결된 모든 집을 찾음
				dfs(nx, ny);
			}
		}
	}
}
